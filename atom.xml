<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啊哒XD的避难所</title>
  
  
  <link href="http://chaoxo.github.io/atom.xml" rel="self"/>
  
  <link href="http://chaoxo.github.io/"/>
  <updated>2021-03-24T11:47:10.331Z</updated>
  <id>http://chaoxo.github.io/</id>
  
  <author>
    <name>啊哒XD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++ string常用方法总结</title>
    <link href="http://chaoxo.github.io/2021/03/24/c-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://chaoxo.github.io/2021/03/24/c-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-24T11:45:28.000Z</published>
    <updated>2021-03-24T11:47:10.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-string常用方法总结"><a href="#c-string常用方法总结" class="headerlink" title="c++ string常用方法总结"></a>c++ string常用方法总结</h1><blockquote><p>因为自己刷题的时候老记不住c++的一些函数方法的使用，总结一下强化记忆</p></blockquote><h2 id="string的使用"><a href="#string的使用" class="headerlink" title="string的使用"></a>string的使用</h2><blockquote></blockquote><h3 id="1-string的构造"><a href="#1-string的构造" class="headerlink" title="1. string的构造"></a>1. string的构造</h3><ul><li>string str：生成空字符串</li><li>string s(str)：生成字符串为str的复制品</li><li>string s(str, str_begin, str_len)：将字符串str中从下标strbegin开始、长度为strlen的部分作为字符串初值</li><li>string s(cstr, char_len)：以C_string类型cstr的前char_len个字符串作为字符串s的初值</li><li>string s(num, char)：生成num个c字符的字符串</li><li>string s(str, str_index)：将字符串str中从下标str_index开始到字符串结束的位置作为字符串初值</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string str1;                 &#x2F;&#x2F;生成空字符串string str2(&quot;123456789&quot;);    &#x2F;&#x2F;生成&quot;1234456789&quot;的复制品string str3(&quot;12345&quot;, 0, 3);  &#x2F;&#x2F;结果为&quot;123&quot;string str4(&quot;012345&quot;, 5);    &#x2F;&#x2F;结果为&quot;01234&quot;string str5(5, &#39;1&#39;);         &#x2F;&#x2F;结果为&quot;11111&quot;string str6(str2, 2);        &#x2F;&#x2F;结果为&quot;3456789&quot;</code></pre><h3 id="2-string的大小和容量"><a href="#2-string的大小和容量" class="headerlink" title="2. string的大小和容量"></a>2. string的大小和容量</h3><ul><li><code>size()</code>和<code>length()</code>：返回string对象的字符个数，他们执行效果相同。</li><li><code>max_size()</code>：返回string对象最多包含的字符数，超出会抛出length_error异常</li><li><code>capacity()</code>：重新分配内存之前，string对象能包含的最大字符数</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string str(&quot;1234567&quot;);cout &lt;&lt; &quot;size&#x3D;&quot; &lt;&lt; s.size() &lt;&lt; endl;         &#x2F;&#x2F; size&#x3D;7cout &lt;&lt; &quot;length&#x3D;&quot; &lt;&lt; s.length() &lt;&lt; endl;     &#x2F;&#x2F; length&#x3D;7cout &lt;&lt; &quot;max_size&#x3D;&quot; &lt;&lt; s.max_size() &lt;&lt; endl; &#x2F;&#x2F; max_size&#x3D;4294967294cout &lt;&lt; &quot;capacity&#x3D;&quot; &lt;&lt; s.capacity() &lt;&lt; endl; &#x2F;&#x2F; capacity&#x3D;15</code></pre><h3 id="3-string字符串的比较"><a href="#3-string字符串的比较" class="headerlink" title="3. string字符串的比较"></a>3. string字符串的比较</h3><ul><li><code>compare()</code> 用于<strong>string字符串</strong>，也可直接用&lt;、&gt;、= 来比大小  </li><li><code>strcmp()</code>  用于 <strong>char字符串</strong></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main()&#123;    string str1&#x3D;&quot;hello&quot;;    cout&lt;&lt;str1.compare(&quot;helloo&quot;)&lt;&lt;endl;&#x2F;&#x2F;返回-1；     cout&lt;&lt;str1.compare(&quot;hello&quot;)&lt;&lt;endl;&#x2F;&#x2F;返回0 ；     cout&lt;&lt;str1.compare(&quot;hell&quot;)&lt;&lt;endl;&#x2F;&#x2F;返回1； </code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;int main()&#123;    char* str1&#x3D;&quot;hello&quot;;    char* str2&#x3D;&quot;hell&quot;;    char *str3&#x3D;&quot;helloo&quot;;    char *str4&#x3D;&quot;hello&quot;;        &#x2F;&#x2F;原型extern int strcmp(const char *s1,const char *s2);    cout&lt;&lt;strcmp(str1,str2)&lt;&lt;endl;&#x2F;&#x2F;返回1；     cout&lt;&lt;strcmp(str1,str3)&lt;&lt;endl;&#x2F;&#x2F;返回-1；     cout&lt;&lt;strcmp(str1,str4)&lt;&lt;endl;&#x2F;&#x2F;返回0. &#125; </code></pre><h3 id="4-string的插入和拼接和删除"><a href="#4-string的插入和拼接和删除" class="headerlink" title="4. string的插入和拼接和删除"></a>4. string的插入和拼接和删除</h3><ul><li><code>push_back()</code> 用于尾插</li><li><code>insert()</code>  用于指定位置插入</li><li><code>append()</code> 、<code>+</code> 用于拼接</li><li><code>erase()</code> 用于删除</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 尾插一个字符s1.push_back(&#39;a&#39;);s1.push_back(&#39;b&#39;);s1.push_back(&#39;c&#39;);cout&lt;&lt;&quot;s1:&quot;&lt;&lt;s1&lt;&lt;endl; &#x2F;&#x2F; s1:abc&#x2F;&#x2F; insert(pos,char):在制定的位置pos前插入字符chars1.insert(s1.begin(),&#39;1&#39;);cout&lt;&lt;&quot;s1:&quot;&lt;&lt;s1&lt;&lt;endl; &#x2F;&#x2F; s1:1abc&#x2F;&#x2F;方法一：append()string s1(&quot;abc&quot;);s1.append(&quot;def&quot;);cout&lt;&lt;&quot;s1:&quot;&lt;&lt;s1&lt;&lt;endl; &#x2F;&#x2F; s1:abcdef&#x2F;&#x2F; 方法二：+ 操作符string s2 &#x3D; &quot;abc&quot;;&#x2F;*s2 +&#x3D; &quot;def&quot;;*&#x2F;string s3 &#x3D; &quot;def&quot;;s2 +&#x3D; s3.c_str();cout&lt;&lt;&quot;s2:&quot;&lt;&lt;s2&lt;&lt;endl; &#x2F;&#x2F; s2:abcdefstring s1 &#x3D; &quot;123456789&quot;;s1.erase(s1.begin() + 1);                 &#x2F;&#x2F; 结果：13456789s1.erase(s1.begin() + 1, s1.end() - 2);   &#x2F;&#x2F; 结果：189   （左闭右开）s1.erase(1,6);                            &#x2F;&#x2F; 结果：189</code></pre><h3 id="5-string的遍历"><a href="#5-string的遍历" class="headerlink" title="5. string的遍历"></a>5. string的遍历</h3><ul><li>正向迭代器 str.begin()、str.end()</li><li>反向迭代器 str.rbegin()、str.rend()</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string s1(&quot;abcdef&quot;);&#x2F;&#x2F; 正向迭代器string::iterator iter &#x3D; s1.begin();for( ; iter &lt; s1.end() ; iter++)&#123;    cout&lt;&lt;*iter;&#125;cout&lt;&lt;endl;   &#x2F;&#x2F;abcdef&#x2F;&#x2F; 反向迭代器string::reverse_iterator riter &#x3D; s1.rbegin();for( ; riter &lt; s1.rend() ; riter++)&#123;    cout&lt;&lt;*riter;&#125;cout&lt;&lt;endl;  &#x2F;&#x2F;fedcba</code></pre><h3 id="6-string的字符替换"><a href="#6-string的字符替换" class="headerlink" title="6. string的字符替换"></a>6. string的字符替换</h3><ul><li><code>replace()</code> 使用</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string s1(&quot;hello,world!&quot;);s1.replace(6, 5, &quot;girl&quot;);                       &#x2F;&#x2F; 结果：hello,girl.s1.replace(s1.size() - 1, 1, 1, &#39;.&#39;);           &#x2F;&#x2F; 结果：hello,world.s1.replace(s1.begin(), s1.begin() + 5, &quot;boy&quot;);  &#x2F;&#x2F; 结果：boy,girl.</code></pre><h3 id="7-string的大小写变换"><a href="#7-string的大小写变换" class="headerlink" title="7. string的大小写变换"></a>7. string的大小写变换</h3><ul><li><code>tolower(char)</code> 和 <code>toupper(char)</code> <strong>用于char</strong></li><li><code>transform(_InIt _First, _InIt _Last, _OutIt _Dest, _Fn1 _Func)</code> <strong>用于string</strong></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string s &#x3D; &quot;ABCDEFG&quot;;for( int i &#x3D; 0; i &lt; s.size(); i++ )&#123;    s[i] &#x3D; tolower(s[i]);&#125; cout &lt;&lt; s &lt;&lt; endl;  &#x2F;&#x2F;abcdefgtransform(s.begin(), s.end(), s.begin(), ::toupper);  &#x2F;&#x2F; 用于string toupper&#x2F;tolowercout &lt;&lt; s &lt;&lt; endl;  &#x2F;&#x2F;&quot;ABCDEFG&quot;</code></pre><h3 id="8-string的查找"><a href="#8-string的查找" class="headerlink" title="8. string的查找"></a>8. string的查找</h3><h4 id="均返回第一个找到的"><a href="#均返回第一个找到的" class="headerlink" title="均返回第一个找到的"></a>均返回第一个找到的</h4><ul><li><code>find()</code> 从头查找一个字符串/字符，返回首字母下标</li><li><code>refind()</code> 从尾查找一个字符串/字符，返回首字母下标</li><li><code>find_first_of()</code> 从前查找 <strong>存在于</strong> 字符串集合内的字符，返回 4(“b”)，下标（字符）</li><li><code>find_first_not_of</code> 从前查找 <strong>不存在于</strong> 字符串集合内的字符，返回下标</li><li><code>find_last_of</code> 从后往前查找 <strong>存在于</strong> 字符串集合内的字符，返回下标</li><li><code>find_last_not_of</code> 从后往前查找 <strong>不存在于</strong> 字符串集合内的字符，返回下标</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string s(&quot;dog bird chicken bird cat&quot;);&#x2F;&#x2F;字符串查找-----找到后返回首字母在字符串中的下标&#x2F;&#x2F; 1. 查找一个字符串cout &lt;&lt; s.find(&quot;chicken&quot;) &lt;&lt; endl;        &#x2F;&#x2F; 结果是：9&#x2F;&#x2F; 2. 从下标为6开始找字符&#39;i&#39;，返回找到的第一个i的下标cout &lt;&lt; s.find(&#39;i&#39;, 6) &lt;&lt; endl;            &#x2F;&#x2F; 结果是：11&#x2F;&#x2F; 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标cout &lt;&lt; s.rfind(&quot;chicken&quot;) &lt;&lt; endl;       &#x2F;&#x2F; 结果是：9&#x2F;&#x2F; 4. 从字符串的末尾开始查找字符cout &lt;&lt; s.rfind(&#39;i&#39;) &lt;&lt; endl;             &#x2F;&#x2F; 结果是：18&#x2F;&#x2F; 5. 在该字符串中查找第一个属于字符串s的字符cout &lt;&lt; s.find_first_of(&quot;13br98&quot;) &lt;&lt; endl;  &#x2F;&#x2F; 结果是：4(&quot;b&quot;)&#x2F;&#x2F; 6. 在该字符串中查找第一个不属于字符串s的字符，先匹配dog，然后bird匹配不到，所以打印4cout &lt;&lt; s.find_first_not_of(&quot;hello dog 2006&quot;) &lt;&lt; endl; &#x2F;&#x2F; 结果是：4&#x2F;&#x2F; 7. 在该字符串从后往前查找第一个属于字符串s的字符cout &lt;&lt; s.find_last_of(&quot;13r98&quot;) &lt;&lt; endl;               &#x2F;&#x2F; 结果是：19&#x2F;&#x2F; 8. 在该字符串从后往前查找第一个不属于字符串s的字符，先匹配tac，然后空格匹配不到，所以打印21cout &lt;&lt; s.find_last_not_of(&quot;teac&quot;) &lt;&lt; endl;            &#x2F;&#x2F; 结果是：21</code></pre><h3 id="9-string的排序"><a href="#9-string的排序" class="headerlink" title="9. string的排序"></a>9. string的排序</h3><ul><li><code>sort(iterator iter1, iterator iter2)</code>  对[iter1, iter2)进行排序</li><li><code>sort(s.begin(),s.end())</code></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">string s &#x3D; &quot;cdbaef&quot;;sort(s.begin(), s.begin() + 3);sort(s.begin(), s.end());cout &lt;&lt; &quot;s：&quot; &lt;&lt; s &lt;&lt; endl;    &#x2F;&#x2F;s：bcdaef</code></pre><h3 id="10-string的分割-截取字符串"><a href="#10-string的分割-截取字符串" class="headerlink" title="10. string的分割/截取字符串"></a>10. string的分割/截取字符串</h3><ul><li><code>str.substr(n)</code> 默认从下标为n处截取到尾</li><li><code>str.substr(n, m)</code> 从n处开始截取m个字符</li></ul><h2 id="字符串string和int等类型的转换"><a href="#字符串string和int等类型的转换" class="headerlink" title="字符串string和int等类型的转换"></a>字符串string和int等类型的转换</h2><h3 id="1-int转string（int、long、unsigned、float、double、long-double）"><a href="#1-int转string（int、long、unsigned、float、double、long-double）" class="headerlink" title="1. int转string（int、long、unsigned、float、double、long double）"></a>1. int转string（int、long、unsigned、float、double、long double）</h3><ul><li><code>to_string()</code></li></ul><h3 id="2-string转int"><a href="#2-string转int" class="headerlink" title="2. string转int"></a>2. string转int</h3><ul><li><code>std::stoi()</code>、<code>stol()</code>、<code>stoll()</code> <strong>int、long、long long</strong></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt; int main()&#123;    std::string str1 &#x3D; &quot;45&quot;;    std::string str2 &#x3D; &quot;3.14159&quot;;    std::string str3 &#x3D; &quot;31337 with words&quot;;    std::string str4 &#x3D; &quot;words and 2&quot;;     int myint1 &#x3D; std::stoi(str1);    int myint2 &#x3D; std::stoi(str2);    int myint3 &#x3D; std::stoi(str3);     std::cout &lt;&lt; &quot;std::stoi(\&quot;&quot; &lt;&lt; str1 &lt;&lt; &quot;\&quot;) is &quot; &lt;&lt; myint1 &lt;&lt; &#39;\n&#39;;    std::cout &lt;&lt; &quot;std::stoi(\&quot;&quot; &lt;&lt; str2 &lt;&lt; &quot;\&quot;) is &quot; &lt;&lt; myint2 &lt;&lt; &#39;\n&#39;;    std::cout &lt;&lt; &quot;std::stoi(\&quot;&quot; &lt;&lt; str3 &lt;&lt; &quot;\&quot;) is &quot; &lt;&lt; myint3 &lt;&lt; &#39;\n&#39;;    &#x2F;&#x2F;结果&#x2F;&#x2F;     std::stoi(&quot;45&quot;) is 45&#x2F;&#x2F;     std::stoi(&quot;3.14159&quot;) is 3&#x2F;&#x2F;     std::stoi(&quot;31337 with words&quot;) is 31337&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c-string常用方法总结&quot;&gt;&lt;a href=&quot;#c-string常用方法总结&quot; class=&quot;headerlink&quot; title=&quot;c++ string常用方法总结&quot;&gt;&lt;/a&gt;c++ string常用方法总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;因为自己刷</summary>
      
    
    
    
    
    <category term="c++" scheme="http://chaoxo.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>关于为什么要开始写Hexo博客的一些事</title>
    <link href="http://chaoxo.github.io/2021/03/15/post/"/>
    <id>http://chaoxo.github.io/2021/03/15/post/</id>
    <published>2021-03-15T09:19:48.000Z</published>
    <updated>2021-03-24T11:46:08.493Z</updated>
    
    <content type="html"><![CDATA[<pre><code>    开始想着说写技术博客的想法是之前白嫖了抖音上宣传代码培训的课，虽然一开始就没打算报班，只是试着听听看，但是还是有收获。比如他们会让自己的学员去定期写博客总结（一般是写在CSDN），我觉得这是个很好的习惯，因为互联网技术其实很多很繁杂，加上自己本身记忆力不好，如果写下来会对自己有很大的帮助同时也可锻炼下写作表达，就像很多营销号推荐的费曼学习法，把掌握的知识再向别人讲述一遍，就会有更深刻的记忆，也会反思自己在理解上有哪些偏差,同时做整理。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;    开始想着说写技术博客的想法是之前白嫖了抖音上宣传代码培训的课，虽然一开始就
没打算报班，只是试着听听看，但是还是有收获。比如他们会让自己的学员去定期写博客
总结（一般是写在CSDN），我觉得这是个很好的习惯，因为互联网技术其实很多很繁杂，
加上自己本</summary>
      
    
    
    
    <category term="日常" scheme="http://chaoxo.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="http://chaoxo.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
